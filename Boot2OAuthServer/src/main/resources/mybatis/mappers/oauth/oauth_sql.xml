<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.test.app.oauth.mapper.OAuthMapper">

	<select id="findAuthenticationByCode" resultType="kr.co.test.app.oauth.model.OAuthAuthenticationCode" parameterType="string">
		/* OAuthMapper.findAuthenticationByCode */
		SELECT code, authentication
		  FROM oauth_code
		 WHERE code = #{code}
	</select>

	<insert id="saveAuthorizationCode" parameterType="kr.co.test.app.oauth.model.OAuthAuthenticationCode">
		/* OAuthMapper.saveAuthorizationCode */
		INSERT INTO oauth_code (
			code
			, authentication
		) VALUES (
			#{code}
			, #{authentication}
		)
	</insert>

	<delete id="deleteAuthorizationCode" parameterType="string">
		/* OAuthMapper.deleteCode */
		DELETE
		  FROM oauth_code
		 WHERE code = #{code}
	</delete>


	<select id="findByUserIdAndClientId" resultType="kr.co.test.app.oauth.model.OAuthApproval" parameterType="kr.co.test.app.oauth.model.OAuthApproval">
		/* OAuthMapper.findByUserIdAndClientId */
		SELECT expiresAt
				, status
				, lastModifiedAt
				, userId
				, clientId
				, scope
		  FROM oauth_approvals
		 WHERE 1=1
		   AND userId = #{userId}
		   AND clientId = #{clientId}
	</select>

	<insert id="saveApproval" parameterType="kr.co.test.app.oauth.model.OAuthApproval">
		/* OAuthMapper.saveApproval */
		INSERT INTO oauth_approvals (
			expiresAt
			, status
			, lastModifiedAt
			, userId
			, clientId
			, scope
		) VALUES (
			#{expiresAt, javaType=java.sql.Timestamp, jdbcType=TIMESTAMP},
		     #{status},
		     #{lastModifiedAt, javaType=java.sql.Timestamp, jdbcType=TIMESTAMP},
		     #{userId},
		     #{clientId},
		     #{scope}
		)
	</insert>

	<update id="refreshApproval" parameterType="kr.co.test.app.oauth.model.OAuthApproval">
		/* OAuthMapper.refreshApproval */
		UPDATE oauth_approvals
		  SET expiresAt = #{expiresAt, javaType=java.sql.Timestamp, jdbcType=TIMESTAMP}
		  		, status = #{status}
		  		, lastModifiedAt = #{lastModifiedAt, javaType=java.sql.Timestamp, jdbcType=TIMESTAMP}
		 WHERE 1=1
		   AND userId = #{userId}
		   AND clientId = #{clientId}
		   AND scope = #{scope}
	</update>

	<update id="expireApproval" parameterType="kr.co.test.app.oauth.model.OAuthApproval">
		/* OAuthMapper.expireApproval */
		UPDATE oauth_approvals
		  SET expiresAt = #{expiresAt}
		 WHERE 1=1
		   AND userId = #{userId}
		   AND clientId = #{clientId}
		   AND scope = #{scope}
	</update>

	<delete id="deleteApproval" parameterType="kr.co.test.app.oauth.model.OAuthApproval">
		/* OAuthMapper.deleteApproval */
		DELETE
		  FROM oauth_approvals
		 WHERE 1=1
		   AND userId = #{userId}
		   AND clientId = #{clientId}
		   AND scope = #{scope}
	</delete>


	<select id="findRefreshTokenByTokenId" resultType="kr.co.test.app.oauth.model.OAuthRefreshToken" parameterType="string">
		/* OAuthMapper.findRefreshTokenByTokenId */
		SELECT *
		  FROM oauth_refresh_token
		 WHERE token_id = #{tokenId}
	</select>

	<insert id="saveRefreshToken" parameterType="kr.co.test.app.oauth.model.OAuthRefreshToken">
		/* OAuthTokenStoreMapper.saveRefreshToken */
		INSERT INTO oauth_refresh_token (
			token_id
			, token
			, authentication
			, username
			, client_id
		) VALUES (
			#{tokenId}
			, #{token}
			, #{authentication}
			, #{username}
			, #{clientId}
		)
	</insert>

	<delete id="deleteRefreshToken" parameterType="kr.co.test.app.oauth.model.OAuthRefreshToken">
		/* OAuthTokenStoreMapper.deleteRefreshToken */
		DELETE
		  FROM oauth_refresh_token
		 WHERE token_id = #{tokenId}
	</delete>

</mapper>